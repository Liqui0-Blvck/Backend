"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w0&skl70z0!3fk566d0p9!f1_wfx)ecx3898&h-pjmo=-#q@6*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    'fruitpos.com',
    'www.fruitpos.com',
    'fruitpos.cl',
    'localhost:5173',
    '127.0.0.1:5173',
]


# Modelo de usuario personalizado
AUTH_USER_MODEL = 'accounts.CustomUser'

# Application definition

INSTALLED_APPS = [


    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Channels
    'channels',
    'channels_redis',
    
    # Rest Framework
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'simple_history',
    
    # Cors
    'corsheaders',
    
    # Apps
    'accounts',
    'business',
    'core',
    'inventory',
    'sales',
    'shifts',
    'reports',
    'announcements',
    'notifications',
]

MIDDLEWARE = [
    # Comentando el middleware CORS para evitar conflictos con Nginx
    # 'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Detectar si estamos en producción basado en la presencia de variables P_
IS_PRODUCTION = os.environ.get('P_POSTGRES_DB') is not None

if IS_PRODUCTION:
    # Configuración de producción con prefijo P_
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('P_POSTGRES_DB', 'fruitpos'),
            'USER': os.environ.get('P_POSTGRES_USER', 'fruitpos_user'),
            'PASSWORD': os.environ.get('P_POSTGRES_PASSWORD', ''),
            'HOST': os.environ.get('P_POSTGRES_HOST', 'localhost'),
            'PORT': os.environ.get('P_POSTGRES_PORT', '5432'),
            'OPTIONS': {
                'connect_timeout': 60,
            },
        }
    }
    
    # Configuraciones adicionales para producción
    DEBUG = False
    ALLOWED_HOSTS.extend(['fruitpos.cl', 'www.fruitpos.cl', 'api.fruitpos.cl'])
    
    REDIS_URL = os.environ.get('P_REDIS_URL', 'redis://localhost:6379/0')
    
    # Configuraciones adicionales de seguridad para producción
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_SSL_REDIRECT = os.environ.get('P_SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # CORS para producción
    CORS_ALLOWED_ORIGINS = os.environ.get('P_CORS_ALLOWED_ORIGINS', 'https://fruitpos.cl,https://www.fruitpos.cl').split(',')
    
    # DigitalOcean Spaces Configuration para producción
    USE_SPACES = os.environ.get('P_USE_SPACES', 'True').lower() == 'true'
    
    if USE_SPACES:
        # Configuración de DigitalOcean Spaces (VALORES REALES DEL USUARIO)
        AWS_ACCESS_KEY_ID = os.environ.get('P_SPACES_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = os.environ.get('P_SPACES_SECRET_ACCESS_KEY')
        AWS_STORAGE_BUCKET_NAME = os.environ.get('P_SPACES_BUCKET_NAME', 'fruitpost')
        AWS_S3_ENDPOINT_URL = os.environ.get('P_SPACES_ENDPOINT_URL', 'https://sfo3.digitaloceanspaces.com')
        AWS_S3_REGION_NAME = os.environ.get('P_SPACES_REGION', 'sfo3')
        
        # Configuración de URLs y paths
        AWS_S3_CUSTOM_DOMAIN = os.environ.get('P_SPACES_CDN_DOMAIN', f'{AWS_STORAGE_BUCKET_NAME}.sfo3.cdn.digitaloceanspaces.com')
        AWS_LOCATION = 'fruitpos'  # Carpeta base en el bucket
        
        # Configuración de archivos estáticos
        STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/static/'
        
        # Configuración de archivos media
        DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/media/'
        
        # Configuraciones adicionales de S3/Spaces
        AWS_S3_OBJECT_PARAMETERS = {
            'CacheControl': 'max-age=86400',  # 1 día de cache
        }
        AWS_DEFAULT_ACL = 'public-read'
        AWS_S3_FILE_OVERWRITE = False  # No sobrescribir archivos con el mismo nombre
        AWS_QUERYSTRING_AUTH = False  # URLs públicas sin query strings de autenticación
        
        # Configuración para archivos estáticos específicos
        AWS_STATIC_LOCATION = 'static'
        AWS_MEDIA_LOCATION = 'media'
        
        # Custom storage classes para separar static y media
        STATICFILES_STORAGE = 'backend.storage_backends.StaticStorage'
        DEFAULT_FILE_STORAGE = 'backend.storage_backends.MediaStorage'
        
    else:
        # Fallback a almacenamiento local en producción
        STATIC_ROOT = os.environ.get('P_STATIC_ROOT', '/var/www/fruitpos/static')
        MEDIA_ROOT = os.environ.get('P_MEDIA_ROOT', '/var/www/fruitpos/media')
        MEDIA_URL = '/media/'
    
else:
    # Configuración de desarrollo
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRES_DB', 'fruitpos'),
            'USER': os.environ.get('POSTGRES_USER', 'fruitpos_user'),
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),
            'HOST': os.environ.get('POSTGRES_HOST', 'backend-db-1'),
            'PORT': os.environ.get('POSTGRES_PORT', '5432'),
            'OPTIONS': {
                'connect_timeout': 60,
            },
        }
    }

    REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')
    
    # CORS para desarrollo
    CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:5173,http://127.0.0.1:5173').split(',')
    
    # Archivos estáticos para desarrollo (almacenamiento local)
    STATIC_ROOT = os.environ.get('STATIC_ROOT', os.path.join(BASE_DIR, 'static'))
    MEDIA_ROOT = os.environ.get('MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))
    MEDIA_URL = '/media/'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Santiago'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Channels y Redis
import os

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://fruitpos.cl",
    "https://fruitpos.cl",
]

# Desactivando completamente la configuración CORS en Django ya que se maneja en Nginx
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:8000",
#     "http://127.0.0.1:8000",
#     "http://localhost:5173",
#     "http://127.0.0.1:5173",
# ]

# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_HEADERS = list(default_headers) + [
#     'x-csrftoken',
# ]

# CORS_ALLOW_ALL_ORIGINS = False

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')],
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework global authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'accounts.authentication.CustomJWTAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
}
